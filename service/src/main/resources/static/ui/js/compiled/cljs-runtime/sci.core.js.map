{"version":3,"sources":["sci/core.cljc"],"mappings":";AAIA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAAA,+BAAAA,tDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qDAAA,rDAAMD,gEA4BFE;AA5BJ,AA4BO,4DAAA,rDAACC,mDAAYD;;;AA5BpB,CAAA,qDAAA,rDAAMF,gEA6BFE,EAAEE;AA7BN,AA8BG,OAACC,+DAAcH,EAAEE;;;AA9BpB,CAAA,+CAAA,/CAAMJ;;AAAN,AAkCA","names":["var_args","G__65719","sci.core/eval-string","js/Error","s","sci.core.eval_string","opts","sci.impl.interpreter.eval_string"],"sourcesContent":["(ns sci.core\n  (:require\n   [sci.impl.interpreter :as i]))\n\n(defn eval-string\n  \"Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:bindings`: a map of symbols to values, e.g.: `{'x 1}`. The\n  symbols will acts as names bound to the corresponding values in the\n  expressions.\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:realize-max`: integer; when provided, program may realize a\n  maximum number of elements from sequences, e.g. `(vec (range))` will\n  throw for any number. This also applies to sequences returned from\n  the expression to the caller.\n\n  - `:preset`: a pretermined set of options. Currently only\n  `:termination-safe` is supported, which will set `:realize-max` to\n  `100` and disallows the symbols `loop`, `recur` and `trampoline`.\"\n  ([s] (eval-string s nil))\n  ([s opts]\n   (i/eval-string s opts)))\n\n;;;; Scratch\n\n(comment\n  (eval-string \"(inc x)\" {:bindings {'x 2}})\n  )\n"]}