{"version":3,"sources":["malli/swagger.cljc"],"mappings":"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","names":["js/malli","js/malli.swagger","js/malli.swagger.accept","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__67330","cljs.core/MultiFn","cljs.core.symbol","malli.swagger/accept","name","_schema","_children","_options","schema","children","options","malli.json-schema/accept","_","cljs.core.assoc","cljs.core/first","cs","cljs.core.mapv","cljs.core/last","p__67349","map__67350","cljs.core/--destructure-map","type","in","k","cljs.core._EQ_","cljs.core.not_EQ_","malli.swagger/-swagger-visitor","or__4212__auto__","malli.json-schema/maybe-prefix","cljs.core.merge","malli.core.name","malli.json-schema/json-schema-props","var_args","G__67361","malli.swagger/transform","js/Error","?schema","malli.swagger.transform","malli.core.accept"],"sourcesContent":["(ns malli.swagger\n  (:require [malli.json-schema :as json-schema]\n            [malli.core :as m]))\n\n(defmulti accept (fn [name _schema _children _options] name) :default ::default)\n\n(defmethod accept ::default [name schema children options] (json-schema/accept name schema children options))\n(defmethod accept 'float? [_ _ _ _] {:type \"number\" :format \"float\"})\n(defmethod accept 'double? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'nil? [_ _ _ _] {})\n\n(defmethod accept :and [_ _ children _] (assoc (first children) :x-allOf children))\n(defmethod accept :or [_ _ children _] (assoc (first children) :x-anyOf children))\n(defmethod accept :multi [_ _ children _] (let [cs (mapv last children)] (assoc (first cs) :x-anyOf cs)))\n\n(defmethod accept :maybe [_ _ children {:keys [type in]}]\n  (let [k (if (and (= type :parameter) (not= in :body)) :allowEmptyValue :x-nullable)]\n    (assoc (first children) k true)))\n\n(defmethod accept :tuple [_ _ children _] {:type \"array\" :items {} :x-items children})\n\n(defn- -swagger-visitor [schema children options]\n  (or (json-schema/maybe-prefix schema :swagger)\n      (json-schema/maybe-prefix schema :json-schema)\n      (merge (accept (m/name schema) schema children options)\n             (json-schema/json-schema-props schema \"swagger\"))))\n\n;;\n;; public api\n;;\n\n(defn transform\n  ([?schema]\n   (transform ?schema nil))\n  ([?schema options]\n   (m/accept ?schema -swagger-visitor options)))\n"]}