{"version":3,"sources":["sci/impl/interpreter.cljc"],"mappings":"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","names":["sci.impl.interpreter/macros","sci.impl.interpreter/eval-and","ctx","args","cljs.core/empty?","vec__65559","seq__65560","cljs.core/seq","first__65561","cljs.core/first","cljs.core/next","x","xs","v","sci.impl.interpreter/interpret","sci.impl.interpreter/eval-or","vec__65563","seq__65564","first__65565","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","sci.impl.interpreter/eval-let","seq65571","G__65572","G__65573","self__4805__auto__","let-bindings","exprs","G__65578","vec__65581","seq__65582","first__65583","vec__65588","seq__65589","first__65590","let-name","let-val","rest-let-bindings","cljs.core/assoc-in","cljs.core/last","p1__65570#","cljs.core.map","sci.impl.interpreter/eval-do","expr","cljs.core/rest","temp__5753__auto__","sci.impl.macros/macroexpand","ret","e65592","js/Error","e","sci.impl.utils/re-throw-with-location-of-node","temp__5751__auto__","n","sci.impl.interpreter/eval-if","vec__65594","cljs.core.nth","_if","cond","then","else","sci.impl.interpreter/eval-when","vec__65598","seq__65599","first__65600","_when","body","p1__65597#","p__65601","vec__65602","sci.impl.interpreter/eval-def","_def","var-name","?docstring","?init","docstring","init","m","cljs.core/with-meta","cljs.core.swap_BANG_","cljs.core/assoc","p__65606","map__65607","cljs.core/--destructure-map","bindings","cljs.core.get","env","sci.impl.interpreter/lookup","sym","or__4212__auto__","cljs.core/find","sci.impl.namespaces/clojure-core","ns","cljs.core/namespace","cljs.core._EQ_","cljs.core.symbol","cljs.core/name","G__65608","cljs.core/meta","cljs.core/deref","sci.impl.interpreter/resolve-symbol","cljs.core/second","clojure.string/starts-with?","cljs.core.subs","sci.impl.utils.throw_error_with_location","sci.impl.interpreter/parse-libspec-opts","opts","G__65612","vec__65613","seq__65614","first__65615","vec__65620","seq__65621","first__65622","opts-map","opt-name","fst-opt","rst-opts","cljs.core/not","G__65623","cljs.core/Keyword","cljs.core.assoc","cljs.core/cons","p__65624","vec__65626","seq__65627","first__65628","sci.impl.interpreter/handle-require-libspec","lib-name","map__65629","as","refer","ns-data","cljs.core/sequential?","cljs.core.reduce","vec__65630","_k","sci.impl.interpreter/eval-require","p1__65637#","cljs.core/run!","p__65638","vec__65639","map__65642","case-map","case-val","case-default","sci.impl.interpreter/eval-case","_case","vec__65643","_","found","cljs.core/vector?","G__65646","G__65647","sci.impl.interpreter/eval-try","map__65648","catches","finally","e65649","vec__65652","r","c","clazz","cljs.core/reduced","G__65650","G__65651","sci.impl.interpreter/unquote-splicing?","cljs.core/seq?","sci.impl.interpreter/process-seq","form","uq?","G__65656","x'","sci.impl.interpreter/walk-syntax-quote","cljs.core.into","cljs.core.conj","p__65658","map__65659","gensyms","sci.impl.interpreter/process-symbol","clojure.string/ends-with?","generated","cljs.core.gensym","cljs.core/list?","f","sci.impl.interpreter/eval-syntax-quote","cljs.core.apply","cljs.core/list","cljs.core/coll?","cljs.core/empty","cljs.core/Symbol","cljs.core.atom","sci.impl.interpreter/eval-call","G__65663","cljs.core/LazySeq","G__65664","G__65665","p1__65661#","cljs.core/ifn?","p1__65662#","cljs.core.pr_str","eval?","sci.impl.fns/eval-fn","cljs.core/map?","cljs.core/zipmap","p1__65666#","cljs.core/keys","p1__65667#","cljs.core/vals","cljs.core/set?","p1__65668#","sci.impl.max-or-throw/max-or-throw","sci.impl.interpreter/init-env!","aliases","namespaces","env-val","cljs.core.merge","cljs.core.merge_with","cljs.core/merge","sci.impl.namespaces/namespaces","sci.impl.namespaces/aliases","sci.impl.interpreter/presets","sci.impl.interpreter/strip-core-ns","G__65675","sci.impl.interpreter/process-permissions","seq65676","self__4806__auto__","permissions","cljs.core/not-empty","cljs.core.comp","cljs.core/cat","G__65682","sci.impl.interpreter/eval-string","p__65685","map__65686","allow","deny","realize-max","preset","s","sci.impl.interpreter.eval_string","sci.impl.exceptions/exception-bindings","sci.impl.interpreter.process_permissions","edn-vals","sci.impl.parser/parse-string-all"],"sourcesContent":["(ns sci.impl.interpreter\n  {:no-doc true}\n  (:refer-clojure :exclude [destructure macroexpand])\n  (:require\n   [clojure.string :as str]\n   [sci.impl.fns :as fns]\n   [sci.impl.macros :as macros]\n   [sci.impl.max-or-throw :refer [max-or-throw]]\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.exceptions :refer [exception-bindings]]\n   [sci.impl.parser :as p]\n   [sci.impl.utils :as utils :refer [throw-error-with-location]]))\n\n(declare interpret)\n#?(:clj (set! *warn-on-reflection* true))\n\n(def macros\n  '#{do if when and or -> ->> as-> quote let fn def defn\n     lazy-seq require try syntax-quote})\n\n;;;; Evaluation\n\n(defn eval-and\n  \"The and macro from clojure.core.\"\n  [ctx args]\n  (if (empty? args) true\n      (let [[x & xs] args\n            v (interpret ctx x)]\n        (if v\n          (if (empty? xs) v\n              (eval-and ctx xs))\n          v))))\n\n(defn eval-or\n  \"The or macro from clojure.core.\"\n  [ctx args]\n  (if (empty? args) nil\n      (let [[x & xs] args\n            v (interpret ctx x)]\n        (if v v\n            (if (empty? xs) v\n                (eval-or ctx xs))))))\n\n(defn eval-let\n  \"The let macro from clojure.core\"\n  [ctx let-bindings & exprs]\n  (let [ctx (loop [ctx ctx\n                   [let-name let-val & rest-let-bindings] let-bindings]\n              (let [v (interpret ctx let-val)\n                    ctx (assoc-in ctx [:bindings let-name] v)]\n                (if (empty? rest-let-bindings)\n                  ctx\n                  (recur ctx\n                         rest-let-bindings))))]\n    (last (map #(interpret ctx %) exprs))))\n\n(defn eval-do\n  [ctx expr]\n  (loop [exprs (rest expr)]\n    (when-let [expr (first exprs)]\n      (let [expr (macros/macroexpand ctx expr)\n            ret (try (interpret ctx expr)\n                     (catch #?(:clj Exception :cljs js/Error) e\n                       (utils/re-throw-with-location-of-node e expr)))]\n        (if-let [n (next exprs)]\n          (recur n)\n          ret)))))\n\n(defn eval-if\n  [ctx expr]\n  (let [[_if cond then else] expr]\n    (if (interpret ctx cond)\n      (interpret ctx then)\n      (interpret ctx else))))\n\n(defn eval-when\n  [ctx expr]\n  (let [[_when cond & body] expr]\n    (when (interpret ctx cond)\n      (last (map #(interpret ctx %) body)))))\n\n(defn eval-def\n  [ctx [_def var-name ?docstring ?init]]\n  (let [docstring (when ?init ?docstring)\n        init (if docstring ?init ?docstring)\n        ;; _ (prn \"init\" (meta init))\n        init (interpret ctx init)\n        m (if docstring {:sci/doc docstring} {})\n        var-name (with-meta var-name m)]\n    (swap! (:env ctx) assoc var-name init)\n    init))\n\n(defn lookup [{:keys [:bindings :env]} sym]\n  (or\n   ;; (find @env sym)\n   (find bindings sym)\n   (find namespaces/clojure-core sym)\n   (when-let [ns (namespace sym)]\n     (when (or (= \"clojure.core\" ns)\n               (= \"cljs.core\" ns))\n       (find namespaces/clojure-core (symbol (name sym)))))\n   (when (some-> sym meta :sci.impl/var.declared)\n     (find @env sym))))\n\n(defn resolve-symbol [ctx expr]\n  (second\n   (or\n    (lookup ctx expr)\n    ;; TODO: check if symbol is in macros and then emit an error: cannot take\n    ;; the value of a macro\n    (let [n (name expr)]\n      (if (str/starts-with? n \"'\")\n        (let [v (symbol (subs n 1))]\n          [v v])\n        ;; TODO: can this ever happen now that we resolve symbols at macro-expansion time?\n        (throw-error-with-location\n         (str \"Could not resolve symbol: \" (str expr))\n         expr))))))\n\n(defn parse-libspec-opts [opts]\n  (loop [opts-map {}\n         [opt-name fst-opt & rst-opts] opts]\n    (if-not opt-name opts-map\n            (case opt-name\n              :as (recur (assoc opts-map :as fst-opt)\n                         rst-opts)\n              (:reload :reload-all :verbose) (recur opts-map (cons fst-opt rst-opts))\n              :refer (recur (assoc opts-map :refer fst-opt)\n                            rst-opts)))))\n\n(defn handle-require-libspec\n  [ctx [lib-name & opts]]\n  (let [{:keys [:as :refer]} (parse-libspec-opts opts)]\n    (swap! (:env ctx)\n           (fn [env]\n             (if-let [ns-data (get (:namespaces env) lib-name)]\n               (let [env (if as (assoc-in env [:aliases as] lib-name)\n                             env)\n                     env (if refer\n                           (do\n                             (when-not (sequential? refer)\n                               (throw (new #?(:clj Exception :cljs js/Error)\n                                           (str \":refer value must be a sequential collection of symbols\"))))\n                             (reduce (fn [env sym]\n                                       (assoc env sym\n                                              (if-let [[_k v] (find ns-data sym)]\n                                                v\n                                                (throw (new #?(:clj Exception :cljs js/Error)\n                                                            (str sym \" does not exist\"))))))\n                                     env\n                                     refer))\n                           env)]\n                 env)\n               (throw (new #?(:clj Exception :cljs js/Error)\n                           (str \"Could not require \" lib-name \".\"))))))))\n\n(defn eval-require\n  [ctx expr]\n  (let [args (rest expr)]\n    (run! #(handle-require-libspec ctx %) args)))\n\n(defn eval-case\n  [ctx [_case {:keys [:case-map :case-val :case-default]}]]\n  (let [v (interpret ctx case-val)]\n    (if-let [[_ found] (find case-map v)]\n      (interpret ctx found)\n      (if (vector? case-default)\n        (interpret ctx (second case-default))\n        (throw (new #?(:clj Exception :cljs js/Error)\n                    (str \"No matching clause: \" v)))))))\n\n(defn eval-try\n  [ctx expr]\n  (let [{:keys [:body :catches :finally]} (:sci.impl/try expr)]\n    (try\n      (interpret ctx body)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (if-let\n            [[_ r]\n             (reduce (fn [_ c]\n                       (let [clazz (resolve-symbol ctx (:class c))]\n                         (when (instance? clazz e)\n                           (reduced\n                            [::try-result\n                             (interpret (assoc-in ctx [:bindings (:binding c)]\n                                                  e)\n                                        (:body c))]))))\n                     nil\n                     catches)]\n          r\n          (throw e)))\n      (finally\n        (interpret ctx finally)))))\n\n\n;;;; syntax-quote\n\n(declare eval-syntax-quote walk-syntax-quote)\n\n(defn unquote-splicing? [x]\n  (and (seq? x) (= 'unquote-splicing (first x))))\n\n(defn process-seq [ctx form]\n  (let [ret (loop [ret []\n                   xs form]\n              (if (seq xs)\n                (let [x (first xs)\n                      uq? (some-> x meta :sci.impl/unquote-splicing)\n                      x' (walk-syntax-quote ctx x)\n                      ret (if uq?\n                            (into ret x')\n                            (conj ret x'))]\n                  (recur ret (rest xs)))\n                (seq ret)))]\n    ret))\n\n(defn process-symbol [{:keys [:gensyms] :as ctx} sym]\n  (let [m (meta sym)]\n    (if (:sci.impl/eval m)\n      (interpret ctx sym)\n      (if (namespace sym)\n        sym\n        (let [n (name sym)]\n          (if (str/ends-with? n \"#\")\n            (if-let [generated (get @gensyms sym)]\n              (interpret ctx generated)\n              (let [n (subs n 0 (dec (count n)))\n                    generated (gensym (str n \"__\"))\n                    generated (symbol (str (name generated) \"__auto__\"))]\n                (swap! gensyms assoc sym generated)\n                generated))\n            sym))))))\n\n(defn walk-syntax-quote\n  [ctx form]\n  (cond\n    (list? form) (let [f (first form)]\n                   (if (= 'syntax-quote f)\n                     (eval-syntax-quote ctx form)\n                     (apply list (process-seq ctx form))))\n    (seq? form) (process-seq ctx form)\n    (coll? form) (into (empty form) (process-seq ctx form))\n    (symbol? form) (process-symbol ctx form)\n    :else (interpret ctx form)))\n\n(defn eval-syntax-quote\n  [ctx expr]\n  (let [gensyms (atom {})\n        ctx (assoc ctx :gensyms gensyms)]\n    (walk-syntax-quote ctx (second expr))))\n\n;;;; end syntax-quote\n\n(declare eval-string)\n\n(defn eval-call [ctx expr]\n  (if (empty? expr) expr\n      (let [f (first expr)\n            f (or\n               (when (= 'recur f) 'recur)\n               (get macros f)\n               (interpret ctx f))]\n        (case f\n          do\n          (eval-do ctx expr)\n          if\n          (eval-if ctx expr)\n          when\n          (eval-when ctx expr)\n          and\n          (eval-and ctx (rest expr))\n          or\n          (eval-or ctx (rest expr))\n          let\n          (apply eval-let ctx (rest expr))\n          def (eval-def ctx expr)\n          lazy-seq (new #?(:clj clojure.lang.LazySeq\n                           :cljs cljs.core/LazySeq)\n                        #?@(:clj []\n                            :cljs [nil])\n                        (interpret ctx (second expr))\n                        #?@(:clj []\n                            :cljs [nil nil]))\n          recur (with-meta (map #(interpret ctx %) (rest expr))\n                  {:sci.impl/recur true})\n          require (eval-require ctx expr)\n          case (eval-case ctx expr)\n          try (eval-try ctx expr)\n          syntax-quote (eval-syntax-quote ctx expr)\n          ;; else\n          (if (ifn? f) (apply f (map #(interpret ctx %) (rest expr)))\n              (throw (new #?(:clj Exception :cljs js/Error)\n                          (str \"Cannot call \" (pr-str f) \" as a function.\"))))))))\n\n(defn interpret\n  [ctx expr]\n  (let [m (meta expr)\n        eval? (:sci.impl/eval m)\n        ret\n        (cond\n          (not eval?) (do nil ;; (prn \"not eval\" expr)\n                          expr)\n          (:sci.impl/try expr) (eval-try ctx expr)\n          (:sci/fn expr) (fns/eval-fn ctx interpret expr)\n          (:sci.impl/eval-call m) (eval-call ctx expr)\n          (symbol? expr) (resolve-symbol ctx expr)\n          (map? expr) (zipmap (map #(interpret ctx %) (keys expr))\n                              (map #(interpret ctx %) (vals expr)))\n          (or (vector? expr) (set? expr)) (into (empty expr)\n                                                (map #(interpret ctx %)\n                                                     expr))\n          :else (throw (new #?(:clj Exception :cljs js/Error) (str \"unexpected: \" expr))))]\n    ;; for debugging:\n    ;; (prn expr '-> ret)\n    (if-let [n (:realize-max ctx)]\n      (max-or-throw ret (assoc ctx\n                               :expression expr)\n                    n)\n      ret)))\n\n;;;; Called from public API\n\n(defn init-env! [env bindings aliases namespaces]\n  (swap! env (fn [env]\n               (let [env-val (merge env bindings)\n                     namespaces (merge-with merge namespaces/namespaces (:namespaces env) namespaces)\n                     aliases (merge namespaces/aliases (:aliases env) aliases)]\n                 (assoc env-val\n                        :namespaces namespaces\n                        :aliases aliases)))))\n\n(def presets\n  {:termination-safe\n   {:deny '[loop recur trampoline]\n    :realize-max 100}})\n\n(defn strip-core-ns [sym]\n  (case (namespace sym)\n    (\"clojure.core\" \"cljs.core\") (symbol (name sym))\n    sym))\n\n(defn process-permissions [& permissions]\n  (not-empty (into #{} (comp cat (map strip-core-ns)) permissions)))\n\n(defn eval-string\n  ([s] (eval-string s nil))\n  ([s {:keys [:bindings :env\n              :allow :deny\n              :realize-max\n              :preset ;; used by malli\n              :aliases\n              :namespaces]}]\n   (let [preset (get presets preset)\n         env (or env (atom {}))\n         _ (init-env! env bindings aliases namespaces)\n         ctx {:env env\n              :bindings exception-bindings\n              :allow (process-permissions (:allow preset) allow)\n              :deny (process-permissions (:deny preset) deny)\n              :realize-max (or realize-max (:realize-max preset))\n              :start-expression s}\n         edn-vals (p/parse-string-all s)\n         ret (eval-do ctx (cons 'do edn-vals))]\n     ret)))\n\n;;;; Scratch\n\n(comment\n  (eval-string \"((fn f [x] (if (< x 3) (recur (inc x)) x)) 0)\")\n  )\n"]}