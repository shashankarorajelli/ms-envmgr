{"version":3,"sources":["malli/error.cljc"],"mappings":"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","names":["malli.error/default-errors","malli.error/-maybe-localized","x","locale","cljs.core/map?","cljs.core.get","malli.error/-message","error","options","or__4212__auto__","temp__5751__auto__","fn","fexpr__67104","malli.core/eval","malli.error/-ensure","k","cljs.core/sequential?","size'","cljs.core/count","cljs.core.into","cljs.core/vec","cljs.core.repeat","malli.error/-just-error?","cljs.core/vector?","cljs.core._EQ_","cljs.core/first","malli.error/-get","cljs.core/set?","malli.error/-put","v","cljs.core.conj","cljs.core.update","e","p__67133","vec__67134","seq__67135","cljs.core/seq","first__67136","cljs.core/next","malli.error/-assoc-in","acc","value","p","ps","acc'","cljs.core/empty","value'","G__67137","G__67138","G__67139","G__67140","p__67147","p__67148","map__67154","cljs.core/--destructure-map","map__67155","malli.error/-path","schema","default-locale","properties","malli.core.properties","var_args","G__67165","malli.error/error-path","js/Error","malli.error.error_path","G__67175","malli.error/error-message","p__67177","p__67178","map__67179","map__67180","malli.error.error_message","type","errors","G__67184","malli.core.name","G__67185","G__67189","malli.error/with-error-message","malli.error.with_error_message","cljs.core.assoc","G__67197","malli.error/with-error-messages","p__67199","map__67203","explanation","malli.error.with_error_messages","f","cljs.core/identity","p1__67194#","cljs.core.partial","cljs.core/map","G__67204","G__67216","malli.error/humanize","p__67222","p__67223","map__67224","map__67225","malli.error.humanize","cljs.core/coll?","cljs.core.reduce","G__67228","G__67229"],"sourcesContent":["(ns malli.error\n  (:require [malli.core :as m]))\n\n(def default-errors\n  {::unknown {:error/message {:en \"unknown error\"}}\n   ::m/missing-key {:error/message {:en \"missing required key\"}}\n   ::m/invalid-type {:error/message {:en \"invalid type\"}}\n   ::m/extra-key {:error/message {:en \"disallowed key\"}}\n   'any? {:error/message {:en \"should be any\"}}\n   'some? {:error/message {:en \"shoud be some\"}}\n   'number? {:error/message {:en \"should be number\"}}\n   'integer? {:error/message {:en \"should be integer\"}}\n   'int? {:error/message {:en \"should be int\"}}\n   'pos-int? {:error/message {:en \"should be positive int\"}}\n   'neg-int? {:error/message {:en \"should be negative int\"}}\n   'nat-int? {:error/message {:en \"should be non-negative int\"}}\n   'float? {:error/message {:en \"should be float\"}}\n   'double? {:error/message {:en \"should be double\"}}\n   'boolean? {:error/message {:en \"should be boolean\"}}\n   'string? {:error/message {:en \"should be string\"}}\n   'ident? {:error/message {:en \"should be ident\"}}\n   'simple-ident? {:error/message {:en \"should be simple ident\"}}\n   'qualified-ident? {:error/message {:en \"should be qualified ident\"}}\n   'keyword? {:error/message {:en \"should be keyword\"}}\n   'simple-keyword? {:error/message {:en \"should be simple keyword\"}}\n   'qualified-keyword? {:error/message {:en \"should be qualified keyword\"}}\n   'symbol? {:error/message {:en \"should be symbol\"}}\n   'simple-symbol? {:error/message {:en \"should be simple symbol\"}}\n   'qualified-symbol? {:error/message {:en \"should be qualified symbol\"}}\n   'uuid? {:error/message {:en \"should be uuid\"}}\n   'uri? {:error/message {:en \"should be uri\"}}\n   #?@(:clj ['decimal? {:error/message {:en \"should be decimal\"}}])\n   'inst? {:error/message {:en \"should be inst\"}}\n   'seqable? {:error/message {:en \"should be seqable\"}}\n   'indexed? {:error/message {:en \"should be indexed\"}}\n   'map? {:error/message {:en \"should be map\"}}\n   'vector? {:error/message {:en \"should be vector\"}}\n   'list? {:error/message {:en \"should be list\"}}\n   'seq? {:error/message {:en \"should be seq\"}}\n   'char? {:error/message {:en \"should be char\"}}\n   'set? {:error/message {:en \"should be set\"}}\n   'nil? {:error/message {:en \"should be nil\"}}\n   'false? {:error/message {:en \"should be false\"}}\n   'true? {:error/message {:en \"should be true\"}}\n   'zero? {:error/message {:en \"should be zero\"}}\n   #?@(:clj ['rational? {:error/message {:en \"should be rational\"}}])\n   'coll? {:error/message {:en \"should be coll\"}}\n   'empty? {:error/message {:en \"should be empty\"}}\n   'associative? {:error/message {:en \"should be associative\"}}\n   'sequential? {:error/message {:en \"should be sequential\"}}\n   #?@(:clj ['ratio? {:error/message {:en \"should be ratio\"}}])\n   #?@(:clj ['bytes? {:error/message {:en \"should be bytes\"}}])})\n\n(defn- -maybe-localized [x locale]\n  (if (map? x) (get x locale) x))\n\n(defn- -message [error x locale options]\n  (or (if-let [fn (-maybe-localized (:error/fn x) locale)] ((m/eval fn) error options))\n      (-maybe-localized (:error/message x) locale)))\n\n(defn- -ensure [x k]\n  (if (sequential? x)\n    (let [size' (count x)]\n      (if (> k size') (into (vec x) (repeat (- (inc k) size') nil)) x))\n    x))\n\n(defn- -just-error? [x]\n  (and (vector? x) (= 1 (count x)) (string? (first x))))\n\n(defn- -get [x k]\n  (if (set? x) (-> x vec (get k)) (get x k)))\n\n(defn- -put [x k v]\n  (if (set? x) (conj x v) (update x k (fn [e] (if (-just-error? v) (into (vec e) v) v)))))\n\n(defn- -assoc-in [acc value [p & ps] error]\n  (cond\n    p (let [acc' (-ensure (or acc (empty value)) p)\n            value' (if ps (-assoc-in (-get acc p) (-get value p) ps error) error)]\n        (-put acc' p value'))\n    (map? value) (recur acc value [:malli/error] error)\n    acc acc\n    :else error))\n\n(defn- -path [{:keys [schema]}\n              {:keys [locale default-locale]\n               :or {default-locale :en}}]\n  (let [properties (m/properties schema)]\n    (or (-maybe-localized (:error/path properties) locale)\n        (-maybe-localized (:error/path properties) default-locale))))\n\n;;\n;; public api\n;;\n\n(defn error-path\n  ([error]\n   (error-path error nil))\n  ([error options]\n   (into (:in error) (-path error options))))\n\n(defn error-message\n  ([error]\n   (error-message error nil))\n  ([{:keys [schema type] :as error}\n    {:keys [errors locale default-locale]\n     :or {errors default-errors\n          default-locale :en} :as options}]\n   (or (-message error (m/properties schema) locale options)\n       (-message error (errors (m/name schema)) locale options)\n       (-message error (errors type) locale options)\n       (-message error (m/properties schema) default-locale options)\n       (-message error (errors (m/name schema)) default-locale options)\n       (-message error (errors type) default-locale options)\n       (-message error (errors ::unknown) locale options)\n       (-message error (errors ::unknown) default-locale options))))\n\n(defn with-error-message\n  ([error]\n   (with-error-message error nil))\n  ([error options]\n   (assoc error :message (error-message error options))))\n\n(defn with-error-messages\n  ([explanation]\n   (with-error-messages explanation nil))\n  ([explanation {f :wrap :or {f identity} :as options}]\n   (update explanation :errors (partial map #(f (with-error-message % options))))))\n\n(defn humanize\n  ([explanation]\n   (humanize explanation nil))\n  ([{:keys [value errors]} {f :wrap :or {f :message} :as options}]\n   (if errors\n     (if (coll? value)\n       (reduce\n         (fn [acc error]\n           (-assoc-in acc value (error-path error options) [(f (with-error-message error options))]))\n         nil errors)\n       [(f (with-error-message (first errors) options))]))))\n"]}