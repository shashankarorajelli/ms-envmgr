{"version":3,"sources":["sci/impl/parser.cljc"],"mappings":";AAWA,uBAAA,2CAAA,6DAAA,2CAAA,1KAAKA,8KACY,WAAKC;AAAL,AAAW,YAAAC,eAAA,KAAA,AAAA,wEAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,OAAA,IAAA,zBAAoBD;GADhD,IAAA,2CAAA,4DAE2B,WAAKA;AAAL,AAAW,YAAAC,eAAA,KAAA,AAAA,gEAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,OAAA,IAAA,zBAAeD;GAFrD,IAGqB,WAAKA;AAAL,AAAW,YAAAC,eAAA,KAAA,AAAA,kFAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,OAAA,IAAA,zBAAwBD;WAHxD,IAIiB,WAAKA;AAAL,AAAW,YAAAC,eAAA,KAAA,AAAA,2DAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,OAAA,IAAA,zBAAaD;GAJzC,IAKiB,WAAKE;AAAL,AAAU,YAAAD,eAAA,KAAA,AAAA,2DAAA,KAAAA,eAAA,SAAA,KAAA,IAAA,OAAA,IAAA,xBAAaC;GALxC,IAAA,2CAAA,6BAAA,zBAMqBC,8BACAC;AAErB,6BAAA,7BAAMC,kEAAYC;AAAlB,AACE,OAACC,+BAA+BR,qBAAKO;;AAEvC,+BAAA,/BAAME,sEAAcC;AAApB,AACE,OAACC,wDAAqBD,EAAEV;;AAE1B,mCAAA,nCAAMY,8EAAkBF;AAAxB,AACE,OAACG,4DAAyBH,EAAEV;;AAI9B","names":["sci.impl.parser/opts","expr","cljs.core/List","val","sci.impl.readers/read-fn","cljs.core/re-pattern","sci.impl.parser/parse-next","r","edamame.impl.parser/parse-next","sci.impl.parser/parse-string","s","edamame.core.parse_string","sci.impl.parser/parse-string-all","edamame.core.parse_string_all"],"sourcesContent":["(ns sci.impl.parser\n  \"This code is largely inspired by rewrite-clj(sc), so thanks to all\n  who contribured to those projects.\"\n  {:no-doc true}\n  (:refer-clojure :exclude [read-string])\n  (:require\n   [sci.impl.readers :as readers]\n   [edamame.core :as edamame]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def opts\n  {:dispatch {\\` (fn [expr] (list 'syntax-quote expr))\n              \\~ {:default (fn [expr] (list 'unquote expr))\n                  \\@ (fn [expr] (list 'unquote-splicing expr))}\n              \\' (fn [expr] (list 'quote expr))\n              \\@ (fn [val] (list 'deref val))\n              \\# {\\( readers/read-fn\n                  \\\" re-pattern}}})\n\n(defn parse-next [r]\n  (edamame.impl.parser/parse-next opts r))\n\n(defn parse-string [s]\n  (edamame/parse-string s opts))\n\n(defn parse-string-all [s]\n  (edamame/parse-string-all s opts))\n\n;;;; Scratch\n\n(comment\n  (parse-string \"{:a 1} {:a 2}\")\n  (parse-string-all \"{:a 1} {:a 2}\")\n  (parse-string \"#(-> % :foo :bar)\")\n  (parse-string \"#\\\"foo\\\"\")\n  #?(:clj (with-in-str \"#{:a :b :c}\" (parse-next *in*)))\n  (parse-string-all \"(try (/ 1 0) (catch java.lang.ArithmeticException _e 1)\n                       (finally (prn \\\"dude\\\"))\")\n  (parse-string-all \"(try 1\")\n  (parse-string-all \"(try (/ 1 0) (catch java.lang.ArithmeticException _e 1) (finally (prn \\\"dude\\\")))\")\n  (parse-string-all \"(prn \\\"DO\\\") (try (/ 1 0) (catch java.lang.ArithmeticException _e 1) (finally (prn \\\"dude\\\")))\")\n  (parse-string-all \"  \")\n  (parse-string \"(\")\n  )\n"]}