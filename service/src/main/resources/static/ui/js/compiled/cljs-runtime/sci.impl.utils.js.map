{"version":3,"sources":["sci/impl/utils.cljc"],"mappings":"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","names":["cljs.core.derive","sci.impl.utils/sci-error?","e","cljs.core.isa_QMARK_","sci.impl.utils/constant?","x","cljs.core/Keyword","sci.impl.utils/mark-resolve-sym","sym","cljs.core.vary_meta","m","cljs.core.assoc","sci.impl.utils/kw-identical?","k","v","cljs.core/keyword-identical?","var_args","G__63294","sci.impl.utils/gensym*","js/Error","cljs.core.gensym","prefix","sci.impl.utils/mark-eval-call","expr","sci.impl.utils/mark-eval","G__63299","sci.impl.utils/throw-error-with-location","msg","iobj","sci.impl.utils.throw_error_with_location","data","map__63311","cljs.core/--destructure-map","row","cljs.core.get","col","cljs.core/meta","cljs.core.ex_info","cljs.core.merge","sci.impl.utils/re-throw-with-location-of-node","node","temp__5751__auto__","clojure.string/includes?","map__63318","and__4210__auto__","new-exception","d","cljs.core/ex-data","sci.impl.utils/merge-meta","obj","cljs.core/with-meta"],"sourcesContent":["(ns sci.impl.utils\n  {:no-doc true}\n  (:require [clojure.string :as str]))\n\n(derive :sci.error/realized-beyond-max :sci/error)\n\n(defn sci-error? [e]\n  (isa? (:type e) :sci/error))\n\n(defn constant? [x]\n  (or (number? x) (string? x) (keyword? x)))\n\n(defn mark-resolve-sym\n  [sym]\n  (vary-meta\n   sym\n   (fn [m]\n     (assoc m\n            :sci.impl/eval true))))\n\n(defn kw-identical? [k v]\n  (#?(:clj identical? :cljs keyword-identical?)\n   k v))\n\n(defn gensym*\n  ([] (mark-resolve-sym (gensym)))\n  ([prefix] (mark-resolve-sym (gensym prefix))))\n\n(defn mark-eval-call\n  [expr]\n  (vary-meta\n   expr\n   (fn [m]\n     (assoc m\n            :sci.impl/eval-call true\n            :sci.impl/eval true))))\n\n(defn mark-eval\n  [expr]\n  (vary-meta\n   expr\n   (fn [m]\n     (assoc m :sci.impl/eval true))))\n\n(defn throw-error-with-location\n  ([msg iobj] (throw-error-with-location msg iobj {}))\n  ([msg iobj data]\n   (let [{:keys [:row :col]} (meta iobj)\n         msg (str msg\n                  \" [at line \" row \", column \" col \"]\") ]\n     (throw (ex-info msg (merge {:type :sci/error\n                                 :row row\n                                 :col col} data))))))\n\n(defn re-throw-with-location-of-node [^Exception e node]\n  (if-let [m #?(:clj (.getMessage e)\n             :cljs (.-message e))]\n    (if (str/includes? m \"[at line\")\n      (throw e)\n      (let [{:keys [:row :col]} (meta node)]\n        (if (and row col)\n          (let [m (str m \" [at line \" row \", column \" col \"]\")\n                new-exception (if-let [d (ex-data e)]\n                                (ex-info m (merge {:type :sci/error\n                                                   :row row\n                                                   :col col} d))\n                                #?(:clj (Exception. m e)\n                                   :cljs (do (set! (.-message e) m) e)))]\n            (throw new-exception))\n          (throw e))))\n    (throw e)))\n\n(defn merge-meta\n  \"Only adds metadata to obj if d is not nil and if meta on obj isn't already nil.\"\n  [obj d]\n  (if d\n    (if-let [m (meta obj)]\n      (with-meta obj (merge m d))\n      obj)\n    obj))\n"]}