{"version":3,"sources":["sci/impl/max_or_throw.cljc"],"mappings":"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","names":["sci$impl$max-or-throw$MaxOrThrow$max_or_throw$dyn","x__4509__auto__","m__4510__auto__","sci.impl.max-or-throw/max-or-throw","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","sci.impl.max-or-throw/MaxOrThrow","this","ctx","n","sci.impl.max-or-throw/bottom","data","cljs.core/LazySeq","cljs.core.ex_info","sci.impl.max-or-throw/take*","coll","err-val","temp__5753__auto__","s","cljs.core/seq","cljs.core/cons","cljs.core/first","G__63716","G__63717","G__63718","cljs.core/rest","sci.impl.max-or-throw/take-or-throw","cljs.core.merge","cljs.core/Delay","cljs.core/select-keys","goog.object/set","cljs.core/PROTOCOL_SENTINEL","cljs.core/Cons","cljs.core/Range","cljs.core/Iterate","cljs.core/Repeat"],"sourcesContent":["(ns sci.impl.max-or-throw\n  {:no-doc true})\n\n(defprotocol MaxOrThrow\n  (max-or-throw [this ctx n]))\n\n(defn bottom [n data]\n  (lazy-seq (throw (ex-info (str \"Maximum number of elements realized: \" n)\n                            data))))\n\n(defn take*\n  ([n coll err-val]\n   (lazy-seq\n    (if (pos? n)\n      (when-let [s (seq coll)]\n        (cons (first s) (take* (dec n) (rest s) err-val)))\n      err-val))))\n\n(defn take-or-throw [coll ctx n]\n  (take* n coll\n         (bottom n (merge {:coll (delay coll)\n                           :type :sci.error/realized-beyond-max\n                           :realize-max n}\n                          (select-keys ctx [:start-expression\n                                            :expression])))))\n\n(extend-protocol MaxOrThrow\n\n  nil\n  (max-or-throw\n    ([this ctx n] this))\n\n  #?(:clj Object :cljs default)\n  (max-or-throw\n    ([this ctx n] this))\n\n  #?(:clj clojure.lang.LazySeq :cljs LazySeq)\n  (max-or-throw\n    ([this ctx n]\n     (take-or-throw ctx n this)))\n\n  #?(:clj clojure.lang.Cons :cljs Cons)\n  (max-or-throw\n    ([this ctx n]\n     (take-or-throw this ctx n)))\n\n  #?(:clj clojure.lang.Range :cljs Range)\n  (max-or-throw\n    ([this ctx n]\n     (take-or-throw this ctx n)))\n\n  #?@(:clj [clojure.lang.LongRange\n            (max-or-throw\n             ([this ctx n]\n              (take-or-throw this ctx n)))])\n\n  #?(:clj clojure.lang.Iterate :cljs Iterate)\n  (max-or-throw\n    ([this ctx n]\n     (take-or-throw this ctx n)))\n\n  #?(:clj clojure.lang.Repeat :cljs Repeat)\n  (max-or-throw\n    ([this ctx n]\n     ;; (prn \"TYPE\" (type this))\n     (take-or-throw this ctx n)))\n  )\n"]}