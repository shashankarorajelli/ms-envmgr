{"version":3,"sources":["malli/json_schema.cljc"],"mappings":"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","names":["malli.json-schema/unlift-keys","m","ns-str","p1__67074#","p2__67073#","p3__67075#","cljs.core/reduce-kv","cljs.core._EQ_","cljs.core/namespace","cljs.core.assoc","cljs.core.keyword","cljs.core/name","malli.json-schema/maybe-prefix","schema","prefix","G__67077","malli.core.properties","cljs.core.get","malli.json-schema/json-schema-props","$","cljs.core.merge","cljs.core/select-keys","js/malli","js/malli.json-schema","js/malli.json-schema.accept","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","fexpr__67088","cljs.core/MultiFn","cljs.core.symbol","malli.json-schema/accept","name","_schema","_children","_options","_","p__67198","vec__67200","cljs.core.nth","value","p__67205","vec__67206","p__67212","vec__67213","p__67218","vec__67219","children","required","cljs.core.filter","cljs.core.comp","cljs.core/not","cljs.core/second","cljs.core.mapv","cljs.core/first","cljs.core.apply","cljs.core/array-map","cljs.core.mapcat","p__67232","vec__67233","k","s","cljs.core/last","cljs.core.conj","options","malli.core.children","malli.json-schema/-json-schema-visitor","or__4212__auto__","malli.core.name","var_args","G__67288","malli.json-schema/transform","js/Error","?schema","malli.json_schema.transform","malli.core.accept"],"sourcesContent":["(ns malli.json-schema\n  (:require [malli.core :as m]))\n\n(defn unlift-keys [m ns-str]\n  (reduce-kv #(if (= ns-str (namespace %2)) (assoc %1 (keyword (name %2)) %3) %1) {} m))\n\n(defn maybe-prefix [schema prefix]\n  (some-> schema m/properties (get prefix)))\n\n(defn json-schema-props [schema prefix]\n  (as-> (m/properties schema) $ (merge (select-keys $ [:title :description :default]) (unlift-keys $ prefix))))\n\n(defmulti accept (fn [name _schema _children _options] name) :default ::default)\n\n(defmethod accept ::default [_ _ _ _] {})\n(defmethod accept 'any? [_ _ _ _] {})\n(defmethod accept 'some? [_ _ _ _] {})\n(defmethod accept 'number? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'integer? [_ _ _ _] {:type \"integer\"})\n(defmethod accept 'int? [_ _ _ _] {:type \"integer\" :format \"int64\"})\n(defmethod accept 'pos-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :minimum 1})\n(defmethod accept 'neg-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :maximum -1})\n(defmethod accept 'nat-int? [_ _ _ _] {:type \"integer\", :format \"int64\" :minimum 0})\n(defmethod accept 'float? [_ _ _ _] {:type \"number\"})\n(defmethod accept 'double? [_ _ _ _] {:type \"number\"})\n(defmethod accept 'boolean? [_ _ _ _] {:type \"boolean\"})\n(defmethod accept 'string? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'ident? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'simple-ident? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'qualified-ident? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'keyword? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'simple-keyword? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'qualified-keyword? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'symbol? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'simple-symbol? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'qualified-symbol? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'uuid? [_ _ _ _] {:type \"string\" :format \"uuid\"})\n(defmethod accept 'uri? [_ _ _ _] {:type \"string\" :format \"uri\"})\n(defmethod accept 'decimal? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'inst? [_ _ _ _] {:type \"string\" :format \"date-time\"})\n(defmethod accept 'seqable? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'indexed? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'map? [_ _ _ _] {:type \"object\"})\n(defmethod accept 'vector? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'list? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'seq? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'char? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'set? [_ _ _ _] {:type \"array\" :uniqueItems true})\n(defmethod accept 'nil? [_ _ _ _] {:type \"null\"})\n(defmethod accept 'false? [_ _ _ _] {:type \"boolean\"})\n(defmethod accept 'true? [_ _ _ _] {:type \"boolean\"})\n(defmethod accept 'zero? [_ _ _ _] {:type \"integer\"})\n#?(:clj (defmethod accept 'rational? [_ _ _ _] {:type \"double\"}))\n(defmethod accept 'coll? [_ _ _ _] {:type \"object\"})\n(defmethod accept 'empty? [_ _ _ _] {:type \"array\" :maxItems 0 :minItems 0})\n(defmethod accept 'associative? [_ _ _ _] {:type \"object\"})\n(defmethod accept 'sequential? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'ratio? [_ _ _ _] {:type \"integer\"})\n(defmethod accept 'bytes? [_ _ _ _] {:type \"string\" :format \"byte\"})\n\n(defmethod accept :> [_ _ [value] _] {:type \"number\" :format \"double\" :exclusiveMinimum value})\n(defmethod accept :>= [_ _ [value] _] {:type \"number\" :format \"double\" :minimum value})\n(defmethod accept :< [_ _ [value] _] {:type \"number\" :format \"double\" :exclusiveMaximum value})\n(defmethod accept :<= [_ _ [value] _] {:type \"number\" :format \"double\" :maximum value})\n(defmethod accept := [_ _ _ _] {})\n(defmethod accept :not= [_ _ _ _] {})\n\n(defmethod accept :and [_ _ children _] {:allOf children})\n(defmethod accept :or [_ _ children _] {:anyOf children})\n\n(defmethod accept :map [_ schema children _]\n  (let [required (->> children (filter (comp not :optional second)) (mapv first))]\n    (merge\n      {:type \"object\"\n       :properties (apply array-map (mapcat (fn [[k _ s]] [k s]) children))\n       :required required}\n      (json-schema-props schema \"json-schema\"))))\n\n(defmethod accept :multi [_ _ children _] {:oneOf (mapv last children)})\n(defmethod accept :map-of [_ _ children _] {:type \"object\", :additionalProperties (second children)})\n(defmethod accept :vector [_ _ children _] {:type \"array\", :items (first children)})\n(defmethod accept :list [_ _ children _] {:type \"array\", :items (first children)})\n(defmethod accept :sequential [_ _ children _] {:type \"array\", :items (first children)})\n(defmethod accept :set [_ _ children _] {:type \"array\", :items (first children), :uniqueItems true})\n(defmethod accept :enum [_ _ children _] {:enum children})\n(defmethod accept :maybe [_ _ children _] {:oneOf (conj children {:type \"null\"})})\n(defmethod accept :tuple [_ _ children _] {:type \"array\", :items children, :additionalItems false})\n(defmethod accept :re [_ schema _ options] {:type \"string\", :pattern (first (m/children schema options))})\n(defmethod accept :fn [_ _ _ _] {})\n\n(defn- -json-schema-visitor [schema children options]\n  (or (maybe-prefix schema :json-schema)\n      (merge (accept (m/name schema) schema children options)\n             (json-schema-props schema \"json-schema\"))))\n\n;;\n;; public api\n;;\n\n(defn transform\n  ([?schema]\n   (transform ?schema nil))\n  ([?schema options]\n   (m/accept ?schema -json-schema-visitor options)))\n"]}