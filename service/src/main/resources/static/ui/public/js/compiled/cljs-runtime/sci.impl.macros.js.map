{"version":3,"sources":["sci/impl/macros.cljc"],"mappings":"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","names":["sci.impl.macros/macros","p__64058","map__64059","cljs.core/--destructure-map","allow","cljs.core.get","deny","sci.impl.macros/check-permission!","check-sym","sym","cljs.core/contains?","sci.impl.utils.throw_error_with_location","sci.impl.macros/lookup-env","env","sym-ns","sym-name","cljs.core/deref","or__4212__auto__","cljs.core/find","G__64084","temp__5753__auto__","aliased","G__64085","v","G__64086","cljs.core.symbol","p__64095","map__64096","bindings","sci.impl.macros/lookup","ctx","vec__64097","cljs.core.nth","G__64100","cljs.core/namespace","cljs.core/name","k","kv","vec__64105","_v","sci.impl.utils/mark-resolve-sym","vec__64119","_","sci.impl.namespaces/clojure-core","cljs.core._EQ_","unqualified-sym","temp__5751__auto__","m","cljs.core/meta","sci.impl.macros/resolve-symbol","expr","res","cljs.core/second","n","clojure.string/starts-with?","cljs.core.subs","p__64139","vec__64140","seq__64141","cljs.core/seq","first__64142","cljs.core/first","cljs.core/next","sci.impl.macros/expand-fn-args+body","fn-name","binding-vector","body-exprs","fixed-args","p1__64132#","cljs.core.take_while","cljs.core.not_EQ_","var-arg","p1__64133#","cljs.core.drop_while","fixed-arity","cljs.core/count","fixed-names","cljs.core/vec","cljs.core.repeatedly","sci.impl.utils/gensym*","destructure-vec","cljs.core.interleave","var-arg-name","sci.impl.utils.gensym_STAR_","cljs.core.conj","arg-bindings","cljs.core.apply","cljs.core/hash-map","cljs.core.repeat","G__64147","cljs.core.update","cljs.core/merge","cljs.core/assoc-in","destructured-vec","sci.impl.destructure/destructure","cljs.core/zipmap","cljs.core.take_nth","body-form","cljs.core.sequence","cljs.core.concat","cljs.core/List","sci.impl.utils/mark-eval-call","cljs.core.doall","p1__64134#","cljs.core.map","sci.impl.macros/macroexpand","arg-list","p__64159","vec__64162","seq__64163","first__64164","sci.impl.macros/expand-fn","_fn","name?","body","cljs.core/Symbol","cljs.core/cons","bodies","cljs.core/seq?","arities","p1__64158#","sci.impl.utils/mark-eval","sci.impl.macros/expand-fn-literal-body","fn-body","cljs.core.get_in","cljs.core.update_in","sci.impl.macros/expand-let*","destructured-let-bindings","exprs","vec__64177","new-let-bindings","cljs.core.reduce","p__64181","p__64182","vec__64183","vec__64186","binding-name","binding-value","cljs.core/assoc","cljs.core.partition","p1__64176#","p__64192","vec__64193","seq__64194","first__64195","sci.impl.macros/expand-let","_let","let-bindings","p__64210","vec__64217","seq__64218","first__64219","sci.impl.macros/expand->","x","forms","expanded","form","threaded","cljs.core/with-meta","p__64247","vec__64252","seq__64253","first__64254","sci.impl.macros/expand->>","p__64274","vec__64279","seq__64280","first__64281","sci.impl.macros/expand-as->","_as","name","vec__64282","seq__64283","first__64284","cljs.core/butlast","cljs.core/empty?","cljs.core/last","p__64313","vec__64315","sci.impl.macros/expand-def","_def","var-name","?docstring","?init","docstring","init","cljs.core.swap_BANG_","p__64321","vec__64324","seq__64325","first__64326","sci.impl.macros/expand-defn","op","docstring?","macro?","cljs.core.list_STAR_","f","cljs.core.assoc","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","sci.impl.macros/expand-comment","seq64332","G__64333","self__4805__auto__","_ctx","_body","sci.impl.macros/expand-loop","bv","arg-names","init-vals","cljs.core/rest","cljs.core/nnext","G__64349","G__64350","cljs.core/list","sci.impl.macros/expand-lazy-seq","G__64356","G__64357","sci.impl.macros/expand-cond*","seq64360","self__4806__auto__","clauses","js/Error","sci.impl.macros/expand-cond","G__64373","G__64374","sci.impl.macros/expand-case","G__64384","G__64385","match-clauses","result-clauses","p1__64377#","default","cljs.core/odd?","G__64390","G__64391","case-map","ret","sci.impl.macros/expand-try","catches","p1__64398#","cljs.core.filter","c","vec__64415","seq__64416","first__64417","ex","binding","G__64419","G__64420","finally","l","G__64427","G__64428","G__64429","G__64430","sci.impl.macros/expand-syntax-quote","clojure.walk/prewalk","G__64433","G__64437","G__64438","cljs.core.vary_meta","G__64439","G__64440","p__64447","vec__64449","seq__64450","first__64451","sci.impl.macros/expand-declare","_declare","names","_expr","cljs.core.merge","p1__64445#","sci.impl.macros/macroexpand-call","ns","G__64469","sci.impl.macros.expand_comment","G__64475","G__64476","sci.impl.for-macro/expand-for","G__64472","G__64473","sci.impl.doseq-macro/expand-doseq","p1__64461#","p1__64462#","vf","G__64484","G__64485","p1__64463#","p1__64464#","p1__64465#","sci.impl.utils/constant?","sci.impl.utils/kw-identical?","cljs.core/fn?","sci.impl.utils/merge-meta","cljs.core/map?","p1__64488#","cljs.core/keys","p1__64489#","cljs.core/vals","cljs.core/vector?","cljs.core/set?","cljs.core.into","cljs.core/empty","p1__64490#","cljs.core/select-keys"],"sourcesContent":["(ns sci.impl.macros\n  {:no-doc true}\n  (:refer-clojure :exclude [destructure macroexpand macroexpand-all macroexpand-1])\n  (:require\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [sci.impl.destructure :refer [destructure]]\n   [sci.impl.doseq-macro :refer [expand-doseq]]\n   [sci.impl.for-macro :refer [expand-for]]\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.utils :refer\n    [gensym* mark-resolve-sym mark-eval mark-eval-call constant? throw-error-with-location\n     merge-meta kw-identical?]]))\n\n(def macros '#{do if when and or -> ->> as-> quote quote* syntax-quote let fn\n               fn* def defn comment loop lazy-seq for doseq require cond case\n               try defmacro declare})\n\n(defn check-permission! [{:keys [:allow :deny]} check-sym sym]\n  (when-not (if allow (contains? allow check-sym)\n                true)\n    (throw-error-with-location (str sym \" is not allowed!\") sym))\n  (when (if deny (contains? deny check-sym)\n            false)\n    (throw-error-with-location (str sym \" is not allowed!\") sym)))\n\n(defn lookup-env [env sym sym-ns sym-name]\n  (let [env @env]\n    (or (find env sym)\n        (when sym-ns\n          (or (some-> env :namespaces sym-ns (find sym-name))\n              (when-let [aliased (some-> env :aliases sym-ns)]\n                (when-let [v (some-> env :namespaces aliased (get sym-name))]\n                  [(symbol (str aliased) (str sym-name)) v])))))))\n\n(defn lookup [{:keys [:env :bindings] :as ctx} sym]\n  (let [sym-ns (some-> (namespace sym) symbol)\n        sym-name (symbol (name sym))\n        [k v :as kv]\n        (or\n         ;; bindings are not checked for permissions\n         (when-let [[k _v]\n                    (find bindings sym)]\n           ;; never inline a binding at macro time!\n           [k (mark-resolve-sym k)])\n         (when-let\n             [[k _ :as kv]\n              (or\n               (lookup-env env sym sym-ns sym-name)\n               (when-let [v (get macros sym)]\n                 [v v])\n               (find namespaces/clojure-core sym)\n               (when sym-ns\n                 (when (or (= 'clojure.core sym-ns)\n                           (= 'cljs.core sym-ns))\n                   (let [unqualified-sym (symbol (name sym))]\n                     (or (when-let [v (get macros unqualified-sym)]\n                           [v v])\n                         (find namespaces/clojure-core unqualified-sym)))))\n               (when (= 'recur sym)\n                 [sym (mark-resolve-sym sym)]))]\n           (check-permission! ctx k sym)\n           kv))]\n    ;; (prn 'lookup sym '-> res)\n    (if-let [m (meta k)]\n      (if (:sci/deref! m)\n        ;; the evaluation of this expression has been delayed by\n        ;; the caller and now is the time to deref it\n        [k @v] kv)\n      kv)))\n\n(defn resolve-symbol [ctx expr]\n  (let [res (second\n             (or\n              (lookup ctx expr)\n              ;; TODO: check if symbol is in macros and then emit an error: cannot take\n              ;; the value of a macro\n              (let [n (name expr)]\n                (if (str/starts-with? n \"'\")\n                  (let [v (symbol (subs n 1))]\n                    [v v])\n                  (throw-error-with-location\n                   (str \"Could not resolve symbol: \" (str expr))\n                   expr)))))]\n    ;; (prn 'resolve expr '-> res)\n    res))\n\n(declare macroexpand)\n\n(defn expand-fn-args+body [ctx fn-name [binding-vector & body-exprs]]\n  (let [fixed-args (take-while #(not= '& %) binding-vector)\n        var-arg (second (drop-while #(not= '& %) binding-vector))\n        fixed-arity (count fixed-args)\n        fixed-names (vec (repeatedly fixed-arity gensym*))\n        destructure-vec (vec (interleave binding-vector fixed-names))\n        var-arg-name (when var-arg (gensym*))\n        destructure-vec (if var-arg\n                          (conj destructure-vec var-arg var-arg-name)\n                          destructure-vec)\n        arg-bindings (apply hash-map (interleave fixed-names (repeat nil)))\n        ctx (cond-> (update ctx :bindings merge arg-bindings)\n              var-arg\n              (assoc-in [:bindings var-arg-name] nil))\n        destructured-vec (destructure destructure-vec)\n        ctx (update ctx :bindings merge (zipmap (take-nth 2 destructured-vec)\n                                                (repeat nil)))\n        body-form (mark-eval-call\n                   `(~'let ~destructured-vec\n                     ~@(doall (map #(macroexpand ctx %) body-exprs))))\n        arg-list (if var-arg\n                   (conj fixed-names '& var-arg-name)\n                   fixed-names)]\n    {:sci/arg-list arg-list\n     :sci/body [body-form]\n     :sci/fixed-arity fixed-arity\n     :sci/destructure-vec destructure-vec\n     :sci/fixed-names fixed-names\n     :sci/fixed-args fixed-args\n     :sci/var-arg-name var-arg-name\n     :sci/fn-name fn-name}))\n\n(defn expand-fn [ctx [_fn name? & body]]\n  (let [fn-name (if (symbol? name?)\n                  name?\n                  nil)\n        body (if fn-name\n               body\n               (cons name? body))\n        fn-name (or fn-name (gensym* \"fn\"))\n        bodies (if (seq? (first body))\n                 body\n                 [body])\n        ctx (assoc-in ctx [:bindings fn-name] nil)\n        arities (doall (map #(expand-fn-args+body ctx fn-name %) bodies))]\n    (mark-eval\n     {:sci/fn-bodies arities\n      :sci/fn-name fn-name\n      :sci/fn true})))\n\n(defn expand-fn-literal-body [ctx expr]\n  (let [fn-body (get-in expr [:sci/fn-bodies 0])\n        fixed-names (:sci/fixed-names fn-body)\n        var-arg-name (:sci/var-arg-name fn-body)\n        bindings (if var-arg-name\n                   (conj fixed-names var-arg-name)\n                   fixed-names)\n        bindings (zipmap bindings (repeat nil))\n        ctx (update ctx :bindings merge bindings)]\n    ;; expr\n    (-> (update-in expr [:sci/fn-bodies 0 :sci/body 0]\n                   (fn [expr]\n                     (macroexpand ctx expr)))\n        mark-eval)))\n\n(defn expand-let*\n  [ctx destructured-let-bindings exprs]\n  (let [[ctx new-let-bindings]\n        (reduce\n         (fn [[ctx new-let-bindings] [binding-name binding-value]]\n           (let [v (macroexpand ctx binding-value)]\n             [(update ctx :bindings assoc binding-name v)\n              (conj new-let-bindings binding-name v)]))\n         [ctx []]\n         (partition 2 destructured-let-bindings))]\n    (mark-eval-call `(~'let ~new-let-bindings ~@(doall (map #(macroexpand ctx %) exprs))))))\n\n(defn expand-let\n  \"The let macro from clojure.core\"\n  [ctx [_let let-bindings  & exprs]]\n  (let [let-bindings (destructure let-bindings)]\n    (expand-let* ctx let-bindings exprs)))\n\n(defn expand->\n  \"The -> macro from clojure.core.\"\n  [ctx [x & forms]]\n  (let [expanded\n        (loop [x x, forms forms]\n          (if forms\n            (let [form (first forms)\n                  threaded (if (seq? form)\n                             (with-meta (concat (list (first form) x)\n                                                (next form))\n                               (meta form))\n                             (list form x))]\n              (recur threaded (next forms))) x))]\n    (macroexpand ctx expanded)))\n\n(defn expand->>\n  \"The ->> macro from clojure.core.\"\n  [ctx [x & forms]]\n  (let [expanded\n        (loop [x x, forms forms]\n          (if forms\n            (let [form (first forms)\n                  threaded (if (seq? form)\n                             (with-meta\n                               (concat (cons (first form) (next form))\n                                       (list x))\n                               (meta form))\n                             (list form x))]\n              (recur threaded (next forms))) x))]\n    (macroexpand ctx expanded)))\n\n(defn expand-as->\n  \"The ->> macro from clojure.core.\"\n  [ctx [_as expr name & forms]]\n  (let [[let-bindings & body] `([~name ~expr\n                                 ~@(interleave (repeat name) (butlast forms))]\n                                ~(if (empty? forms)\n                                   name\n                                   (last forms)))]\n    (expand-let* ctx let-bindings body)))\n\n(defn expand-def\n  [ctx [_def var-name ?docstring ?init]]\n  (let [docstring (when ?init ?docstring)\n        init (if docstring ?init ?docstring)\n        init (macroexpand ctx init)\n        m (if docstring {:sci/doc docstring} {})\n        var-name (with-meta var-name m)]\n    (swap! (:env ctx) assoc var-name :sci/var.unbound)\n    (mark-eval-call (list 'def var-name init))))\n\n(defn expand-defn [ctx [op fn-name docstring? & body]]\n  (let [macro? (= 'defmacro op)\n        docstring (when (string? docstring?) docstring?)\n        body (if docstring body (cons docstring? body))\n        fn-body (list* 'fn fn-name body)\n        f (expand-fn ctx fn-body)\n        f (assoc f :sci/macro macro?)]\n    (swap! (:env ctx) assoc fn-name :sci/var.unbound)\n    (mark-eval-call (list 'def fn-name f))))\n\n(defn expand-comment\n  \"The comment macro from clojure.core.\"\n  [_ctx & _body])\n\n(defn expand-loop\n  [ctx expr]\n  (let [bv (second expr)\n        arg-names (take-nth 2 bv)\n        init-vals (take-nth 2 (rest bv))\n        body (nnext expr)]\n    (macroexpand ctx (apply list (list 'fn (vec arg-names)\n                                       (cons 'do body))\n                            init-vals))))\n\n(defn expand-lazy-seq\n  [ctx expr]\n  (let [body (rest expr)]\n    (mark-eval-call\n     (list 'lazy-seq\n           (macroexpand ctx (list 'fn [] (cons 'do body)))))))\n\n(defn expand-cond*\n  \"The cond macro from clojure.core\"\n  [& clauses]\n  (when clauses\n    (list 'if (first clauses)\n          (if (next clauses)\n            (second clauses)\n            (throw (new #?(:clj IllegalArgumentException\n                           :cljs js/Error)\n                        \"cond requires an even number of forms\")))\n          (apply expand-cond* (next (next clauses))))))\n\n(defn expand-cond\n  [ctx expr]\n  (let [clauses (rest expr)]\n    (macroexpand ctx (apply expand-cond* clauses))))\n\n(defn expand-case\n  [ctx expr]\n  (let [v (macroexpand ctx (second expr))\n        clauses (nnext expr)\n        match-clauses (take-nth 2 clauses)\n        result-clauses (map #(macroexpand ctx %) (take-nth 2 (rest clauses)))\n        default (when (odd? (count clauses))\n                  [:val (macroexpand ctx (last clauses))])\n        case-map (zipmap match-clauses result-clauses)\n        ret (mark-eval-call (list 'case\n                                  {:case-map case-map\n                                   :case-val v\n                                   :case-default default}\n                                  default))]\n    (mark-eval-call ret)))\n\n(defn expand-try\n  [ctx expr]\n  (let [catches (filter #(and (seq? %) (= 'catch (first %))) expr)\n        catches (map (fn [c]\n                       (let [[_ ex binding & body] c]\n                         {:class (resolve-symbol ctx ex)\n                          :binding binding\n                          :body (macroexpand (assoc-in ctx [:bindings binding] nil)\n                                             (cons 'do body))}))\n                     catches)\n        finally (let [l (last expr)]\n                  (when (= 'finally (first l))\n                    (macroexpand ctx (cons 'do (rest l)))))]\n    (mark-eval\n     {:sci.impl/try\n      {:body (macroexpand ctx (second expr))\n       :catches catches\n       :finally finally}})))\n\n(defn expand-syntax-quote [ctx expr]\n  (let [ret (walk/prewalk\n             (fn [x]\n               (if (seq? x)\n                 (case (first x)\n                   unquote (macroexpand ctx (second x))\n                   unquote-splicing (vary-meta\n                                     (macroexpand ctx (second x))\n                                     (fn [m]\n                                       (assoc m :sci.impl/unquote-splicing true)))\n                   x)\n                 x))\n             (second expr))]\n    (mark-eval-call (list 'syntax-quote ret))))\n\n(defn expand-declare [ctx [_declare & names :as _expr]]\n  (swap! (:env ctx)\n         (fn [env]\n           ;; declaring an already existing var does nothing\n           ;; that's why env is the last arg to merge, not the first\n           (merge (zipmap names\n                          (map (fn [n]\n                                 (vary-meta (mark-eval n)\n                                            #(assoc % :sci.impl/var.declared true)))\n                               names))\n                  env)))\n  nil)\n\n(defn macroexpand-call [ctx expr]\n  (if (empty? expr) expr\n      (let [f (first expr)]\n        (if (symbol? f)\n          (let [f (if-let [ns (namespace f)]\n                    (if (or (= \"clojure.core\" ns)\n                            (= \"cljs.core\" ns))\n                      (symbol (name f))\n                      f)\n                    f)]\n            (if (contains? macros f)\n              (do (check-permission! ctx f f)\n                  (case f\n                    do (mark-eval-call expr) ;; do will call macroexpand on every\n                    ;; subsequent expression\n                    let (expand-let ctx expr)\n                    (fn fn*) (expand-fn ctx expr)\n                    def (expand-def ctx expr)\n                    (defn defmacro) (expand-defn ctx expr)\n                    -> (expand-> ctx (rest expr))\n                    ->> (expand->> ctx (rest expr))\n                    as-> (expand-as-> ctx expr)\n                    quote (do nil #_(prn \"quote\" expr) (second expr))\n                    syntax-quote (expand-syntax-quote ctx expr)\n                    comment (expand-comment ctx expr)\n                    loop (expand-loop ctx expr)\n                    lazy-seq (expand-lazy-seq ctx expr)\n                    for (macroexpand ctx (expand-for ctx expr))\n                    doseq (macroexpand ctx (expand-doseq ctx expr))\n                    require (mark-eval-call\n                             (cons 'require (map #(macroexpand ctx %)\n                                                 (rest expr))))\n                    cond (expand-cond ctx expr)\n                    case (expand-case ctx expr)\n                    try (expand-try ctx expr)\n                    declare (expand-declare ctx expr)\n                    ;; else:\n                    (mark-eval-call (doall (map #(macroexpand ctx %) expr)))))\n              (if-let [vf (resolve-symbol ctx f)]\n                (if (:sci/macro (meta vf))\n                  (macroexpand ctx (apply vf (rest expr)))\n                  (mark-eval-call (doall (map #(macroexpand ctx %) expr))))\n                (mark-eval-call (doall (map #(macroexpand ctx %) expr))))))\n          (let [ret (mark-eval-call (doall (map #(macroexpand ctx %) expr)))]\n            ret)))))\n\n(defn macroexpand\n  [ctx expr]\n  (let [ret (cond (constant? expr) expr ;; constants do not carry metadata\n                  (symbol? expr) (let [v (resolve-symbol ctx expr)]\n                                   (cond (kw-identical? :sci/var.unbound v) nil\n                                         (constant? v) v\n                                         (fn? v) (merge-meta v {:sci.impl/eval false})\n                                         :else (merge-meta v (meta expr))))\n                  :else\n                  (merge-meta\n                   (cond\n                     ;; already expanded by reader\n                     (:sci/fn expr) (expand-fn-literal-body ctx expr)\n\n                     (map? expr)\n                     (-> (zipmap (map #(macroexpand ctx %) (keys expr))\n                                 (map #(macroexpand ctx %) (vals expr)))\n                         mark-eval)\n                     (or (vector? expr) (set? expr))\n                     (-> (into (empty expr) (map #(macroexpand ctx %) expr))\n                         mark-eval)\n                     (seq? expr) (macroexpand-call ctx expr)\n                     :else expr)\n                   (select-keys (meta expr)\n                                [:row :col])))]\n    ;; (prn \"expand\" expr '-> ret)\n    ret))\n\n;;;; Scratch\n\n(comment\n  )\n"]}