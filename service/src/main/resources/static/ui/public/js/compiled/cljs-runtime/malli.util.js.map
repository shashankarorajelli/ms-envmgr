{"version":3,"sources":["malli/util.cljc"],"mappings":"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","names":["var_args","G__67072","malli.util/equals","js/Error","?schema1","?schema2","malli.util.equals","options","cljs.core._EQ_","malli.core.form","p__67078","vec__67079","cljs.core.nth","malli.util/simplify-map-entry","k","?p","s","cljs.core/not","and__4210__auto__","cljs.core/count","cljs.core/seq","cljs.core.dissoc","p__67091","p__67092","vec__67097","vec__67100","malli.util/-entry","?p1","s1","e1","_","?p2","s2","e2","merge-required","merge","required","G__67107","G__67108","malli.core/required-map-entry?","p","cljs.core.merge","cljs.core.assoc","G__67119","malli.util/merge","malli.util.merge","vec__67126","map__67129","cljs.core/--destructure-map","cljs.core.get","schema1","schema2","schemas","malli.core.schema","merge-default","r2","cljs.core.not_EQ_","malli.core.name","malli.core.properties","G__67143","cljs.core.conj","cljs.core.into","cljs.core.reduce","p__67145","p__67146","map__67149","vec__67150","keys","acc","k2","p__67157","vec__67158","acc'","k1","cljs.core.update","cljs.core/conj","cljs.core.mapcat","malli.core/map-entries","G__67167","malli.util/union","malli.util.union","r1","cljs.core.fnil","cljs.core/identity","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","malli.util/update-properties","seq67181","G__67182","cljs.core/first","cljs.core/next","G__67183","self__4805__auto__","schema","f","args","properties","cljs.core.apply","malli.core.into_schema","malli.core.children","malli.core.options","malli.util/closed-schema","malli.core.accept","malli.core/schema-visitor","malli.util.update_properties","cljs.core/assoc","malli.util/open-schema","cljs.core/dissoc"],"sourcesContent":["(ns malli.util\n  (:refer-clojure :exclude [merge])\n  (:require [malli.core :as m]))\n\n(defn ^:no-doc equals\n  ([?schema1 ?schema2]\n   (equals ?schema1 ?schema2 nil))\n  ([?schema1 ?schema2 options]\n   (= (m/form ?schema1 options) (m/form ?schema2 options))))\n\n(defn ^:no-doc simplify-map-entry [[k ?p s]]\n  (cond\n    (not s) [k ?p]\n    (and ?p (false? (:optional ?p)) (= 1 (count ?p))) [k s]\n    (not (seq ?p)) [k s]\n    (false? (:optional ?p)) [k (dissoc ?p :optional) s]\n    :else [k ?p s]))\n\n(defn- -entry [[k ?p1 s1 :as e1] [_ ?p2 s2 :as e2] merge-required merge options]\n  (let [required (merge-required (m/required-map-entry? e1) (m/required-map-entry? e2))\n        p (clojure.core/merge ?p1 ?p2)]\n    (simplify-map-entry [k (assoc p :optional (not required)) (merge s1 s2 options)])))\n\n;;\n;; public api\n;;\n\n(defn merge\n  \"Merges two schemas into one with the following rules:\n\n  * if either schemas is `nil`, the other one is used, regardless of value\n  * with two :map schemas, both keys and values are merged\n  * with two :map entries, `:merge-entries` fn is used (default last one wins)\n  * with any other schemas, `:merge-default` fn is used (default last one wins)\n\n  | key               | description\n  | ------------------|-------------\n  | `:merge-default`  | `schema1 schema2 options -> schema` fn to merge unknown entries\n  | `:merge-required` | `boolean boolean -> boolean` fn to resolve how required keys are merged\"\n  ([?schema1 ?schema2]\n   (merge ?schema1 ?schema2 nil))\n  ([?schema1 ?schema2 options]\n   (let [[schema1 schema2 :as schemas] [(if ?schema1 (m/schema ?schema1 options))\n                                        (if ?schema2 (m/schema ?schema2 options))]\n         {:keys [merge-default merge-required]\n          :or {merge-default (fn [_ s2 _] s2)\n               merge-required (fn [_ r2] r2)}} options]\n     (cond\n       (not schema1) schema2\n       (not schema2) schema1\n       (not= :map (m/name schema1) (m/name schema2)) (merge-default schema1 schema2 options)\n       :else (let [p (clojure.core/merge (m/properties schema1) (m/properties schema2))]\n               (-> [:map]\n                   (cond-> p (conj p))\n                   (into (:form\n                           (reduce\n                             (fn [{:keys [keys] :as acc} [k2 :as e2]]\n                               (if (keys k2)\n                                 (->> (reduce\n                                        (fn [acc' [k1 :as e1]]\n                                          (conj acc'\n                                                (if (= k1 k2)\n                                                  (-entry e1 e2 merge-required merge options)\n                                                  e1)))\n                                        [] (:form acc))\n                                      (assoc acc :form))\n                                 (-> acc\n                                     (update :form conj e2)\n                                     (update :keys conj k2))))\n                             {:keys #{}, :form []}\n                             (mapcat m/map-entries schemas))))\n                   (m/schema options)))))))\n\n(defn union\n  \"Union of two schemas. See [[merge]] for more details.\"\n  ([?schema1 ?schema2]\n   (union ?schema1 ?schema2 nil))\n  ([?schema1 ?schema2 options]\n   (let [merge-default (fn [s1 s2 options] (if (equals s1 s2) s1 (m/schema [:or s1 s2] options)))\n         merge-required (fn [r1 r2] (and r1 r2))]\n     (merge ?schema1 ?schema2 (-> options\n                                  (update :merge-default (fnil identity merge-default))\n                                  (update :merge-required (fnil identity merge-required)))))))\n\n(defn update-properties\n  \"Returns a Schema instance with updated properties.\"\n  [schema f & args]\n  (let [schema (m/schema schema)\n        properties (apply f (m/properties schema) args)]\n    (m/into-schema\n      (m/name schema)\n      (if (seq properties) properties)\n      (m/children schema)\n      (m/options schema))))\n\n(defn closed-schema\n  \"Closes recursively all :map schemas by adding `{:closed true}`\n  property, unless schema explicitely open with `{:closed false}`\"\n  [schema]\n  (m/accept\n    schema\n    (m/schema-visitor\n      (fn [schema]\n        (if (and (= :map (m/name schema))\n                 (-> schema m/properties :closed false? not))\n          (update-properties schema assoc :closed true)\n          schema)))))\n\n(defn open-schema\n  \"Closes recursively all :map schemas by removing `:closed`\n  property, unless schema explicitely open with `{:closed false}`\"\n  [schema]\n  (m/accept\n    schema\n    (m/schema-visitor\n      (fn [schema]\n        (if (and (= :map (m/name schema))\n                 (-> schema m/properties :closed false? not))\n          (update-properties schema dissoc :closed)\n          schema)))))\n"]}