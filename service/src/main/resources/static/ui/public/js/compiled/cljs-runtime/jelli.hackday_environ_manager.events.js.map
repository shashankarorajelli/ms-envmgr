{"version":3,"sources":["jelli/hackday_environ_manager/events.cljs"],"mappings":"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","names":["jelli.hackday-environ-manager.events/envmgr-be-base-url","js/envMgrBackendUrl","re_frame.core.reg_event_fx","_","jelli.hackday-environ-manager.db/default-db","re_frame.core.reg_event_db","p__71153","vec__71154","cljs.core.nth","db","environment","project","result","cljs.core/assoc-in","p__71157","vec__71158","jelli.hackday-environ-manager.events/defer-event-interceptor","condition-pred","re_frame.core.__GT_interceptor","context","G__71161","cljs.core.get_in","cljs.core.update","cljs.core/conj","cljs.core/pop","p__71162","map__71163","cljs.core/--destructure-map","cljs.core.get","temp__5751__auto__","deferred-events","cljs.core.dissoc","jelli.hackday-environ-manager.events/project-gather-inflight?","jelli.hackday-environ-manager.events/trace-interceptor","js/console","p__71164","vec__71165","vec__71168","endpoint","ajax.core/json-response-format","jelli.hackday-environ-manager.events/api-keys->ui-keys","jelli.hackday-environ-manager.events/project-data-api->ui","raw-project-data","project-data","clojure.set/rename-keys","p1__71171#","cljs.core.map","cljs.core.juxt","cljs.core.into","p1__71172#","cljs.core.assoc","jelli.hackday-environ-manager.events/project-data-ui->api","project-key","p1__71173#","p__71174","vec__71175","k","v","cljs.core/PersistentHashMap","clojure.set/map-invert","p__71179","p__71180","map__71181","vec__71182","p1__71178#","medley.core/map-keys","cljs.core/keyword","p__71185","p__71186","map__71187","vec__71188","cljs.core.println","jelli.hackday-environ-manager.db/default-project-data","p__71191","map__71192","var_args","G__71195","jelli.hackday-environ-manager.events/version-links","js/Error","env","jelli.hackday_environ_manager.events.version_links","projects","links","jelli.hackday-environ-manager.db/->env-links","p1__71193#","cljs.core/cons","jelli.hackday-environ-manager.db/links->version-endpoints","p__71198","p__71199","map__71200","vec__71201","environment-keys","project-keys","envs","cljs.core.filter","cljs.core.comp","cljs.core/set","v-links","p1__71196#","cljs.core.mapcat","cljs.core/select-keys","p1__71197#","cljs.core.mapv","cljs.core/PersistentVector","p__71204","map__71205","cljs.core/keys","jelli.hackday-environ-manager.db/deployable-projects","p__71206","p__71207","map__71208","vec__71209","env-keys","p__71213","p__71214","map__71215","vec__71216","new-env","new-environment","cljs.core/first","new-db","version-links","p1__71212#","p__71219","vec__71220","new-project","jelli.hackday-environ-manager.events/ms-defaults","new-project-name","path-end","cljs.core.subs","p__71223","p__71224","map__71225","vec__71226","cljs.core.keyword","G__71229","clojure.string/starts-with?","cljs.core.merge","p__71230","vec__71231","p__71234","p__71235","map__71236","vec__71237","new-def","ajax.core/json-request-format","p__71240","p__71241","map__71242","vec__71243","link-def","return-env"],"sourcesContent":["(ns jelli.hackday-environ-manager.events\n  (:require\n   [clojure.string]\n   [clojure.set]\n   [day8.re-frame.http-fx]\n   [re-frame.core :as re-frame]\n   [ajax.core :as ajax]\n   [jelli.hackday-environ-manager.db :as db]\n   [medley.core :as medley]))\n\n(def envmgr-be-base-url js/envMgrBackendUrl)\n\n(re-frame/reg-event-fx\n ::initialize-db\n (fn [_ _]\n   {:db db/default-db\n    :dispatch [::gather-project-data]}))\n\n(re-frame/reg-event-db\n ::version-info-received\n (fn [db [_ environment project result]]\n   (assoc-in db [:version-data environment project] (:version result))))\n\n(re-frame/reg-event-db\n ::version-info-receipt-failure\n (fn [db [_ environment project result]]\n   (assoc-in db [:version-data environment project] :error)))\n\n(defn defer-event-interceptor [condition-pred]\n  (re-frame/->interceptor\n   :id :defer-event\n   :before (fn [context]\n             (if (condition-pred (get-in context [:coeffects :db]))\n               (let [db (update (get-in context [:coeffects :db])\n                                :intercept/deferred-events\n                                conj (get-in context [:coeffects :event]))]\n                 (-> context\n                     (assoc-in [:effects :db] db)\n                     (update :queue pop)))\n               context))))\n\n(re-frame/reg-event-fx\n ::realize-deferred-events\n (fn [{:keys [db]} _]\n   (if-let [deferred-events (:intercept/deferred-events db)]\n     {:db (dissoc db :intercept/deferred-events)\n      :dispatch-n deferred-events}\n     {})))\n\n(defn- project-gather-inflight? [db] \n  (:project-data/gather-inflight db))\n\n(def trace-interceptor\n  (re-frame/->interceptor\n   :id :trace\n   :before (fn [context]\n             (.log js/console context)\n             context)))\n\n(re-frame/reg-event-fx\n ::gather-version-data\n (fn [_ [_ [environment project endpoint]]]\n   {:http-xhrio {:method :get\n                 :uri endpoint\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [::version-info-received environment project]\n                 :on-failure [::version-info-receipt-failure environment project]}}))\n\n(def ^:private api-keys->ui-keys\n  {:friendlyName :friendly-name\n   :backendVersionEndpoint :backend-version-endpoint\n   :defaultLinkPattern :default-link-pattern\n   :linkOverrides :link-overrides\n   :deploymentMetadata :deployment-metadata\n   :onEnvDashboard :env-dashboard?\n   :landingEndpoint :landing-endpoint\n   :microserviceName :microservice-name})\n\n(defn- project-data-api->ui [raw-project-data]\n  (let [project-data (-> raw-project-data\n                         (dissoc :id)\n                         (clojure.set/rename-keys api-keys->ui-keys)\n                         (update :link-overrides #(->> %\n                                                       (map (juxt :key :value))\n                                                       (into {})))\n                         (update :deployment-metadata #(->> %\n                                                            (map (juxt :key :value))\n                                                            (into {}))))]\n    (assoc project-data :deployment/non-play-job (get-in project-data [:deployment-metadata \"non-play-job\"]))))\n\n(defn- project-data-ui->api [project-key project-data]\n  (-> project-data\n      (update :link-overrides #(->> %\n                                    (map (fn [[k v]]\n                                           (hash-map :key k :value v)))))\n      (assoc :deployment-metadata [{:key \"non-play-job\" :value (:deployment/non-play-job project-data)}])\n      (clojure.set/rename-keys (clojure.set/map-invert api-keys->ui-keys))\n      (assoc :projectKey project-key)))\n\n(re-frame/reg-event-fx\n ::project-data-received\n (fn [{:keys [db]} [_ result]]\n   (let [project-data (->> (:projects result)\n                           (map project-data-api->ui)\n                           (map (juxt :projectKey #(dissoc % :projectKey)))\n                           (into {})\n                           (medley/map-keys keyword))]\n     {:db (assoc db :project-data project-data\n                 :project-data/gather-inflight false)\n      :dispatch [::realize-deferred-events]})))\n          \n\n(re-frame/reg-event-fx\n ::project-data-receipt-failure\n (fn [{:keys [db]} [_ result]]\n   (println \"Couldn't retrieve project data, using default\")\n   {:db (assoc db :project-data db/default-project-data\n               :project-data/gather-inflight false)\n    :dispatch    [::realize-deferred-events]}))\n   \n\n(re-frame/reg-event-fx\n ::gather-project-data\n (fn [{:keys [db]} _]\n   {:db (assoc db :project-data/gather-inflight true)\n    :http-xhrio {:method :get\n                 :uri (str envmgr-be-base-url \"v1/projectdata\")\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [::project-data-received]\n                 :on-failure [::project-data-receipt-failure]}}))\n\n(defn- version-links\n  ([env db]\n   (version-links env (:project-data db) db))\n  ([env projects db]\n   (let [links (db/->env-links {:environment env\n                                :project-data projects})]\n     (map #(cons (:key env) %)\n          (db/links->version-endpoints links projects)))))\n\n(re-frame/reg-event-fx\n ::gather-version-data-by-keys\n (fn [{:keys [db]} [_ environment-keys project-keys]]\n   (let [envs (filter (comp (set environment-keys) :key)\n                      (:environments db))\n         v-links (mapcat #(version-links %\n                                         (select-keys (:project-data db) project-keys)\n                                         db)\n                         envs)]\n     {:dispatch-n (mapv #(vector ::gather-version-data %) v-links)})))\n\n(re-frame/reg-event-fx\n ::gather-deployments-version-data\n [trace-interceptor (defer-event-interceptor project-gather-inflight?)]\n (fn [{:keys [db]} _]\n   (let [project-keys (keys (db/deployable-projects (:project-data db)))]\n     {:dispatch [::gather-version-data-by-keys #{\"dev\" \"stage\" \"prod\" \"int\"} project-keys]})))\n\n(re-frame/reg-event-fx\n ::gather-project-version-data\n [(defer-event-interceptor project-gather-inflight?)]\n (fn [{:keys [db]} [_ project-key]]\n   (let [env-keys (map :key (:environments db))]\n     {:dispatch [::gather-version-data-by-keys env-keys [project-key]]})))\n\n(re-frame/reg-event-fx\n ::select-environment\n [(defer-event-interceptor project-gather-inflight?)]\n (fn [{:keys [db]} [_ new-env]]\n   (let [new-environment (->> (:environments db)\n                              (filter (comp #{new-env} :key))\n                              first)\n         new-db (assoc db :env-dashboard/current-environment new-environment)\n         version-links (version-links new-environment new-db)]\n     {:db new-db\n      :dispatch-n (mapv #(vector ::gather-version-data %) version-links)})))\n\n(re-frame/reg-event-db\n ::select-project\n [(defer-event-interceptor project-gather-inflight?)]\n (fn [db [_ new-project]]\n   (assoc db :project-edit/selected-project new-project)))\n\n(re-frame/reg-event-db\n ::deselect-project\n [(defer-event-interceptor project-gather-inflight?)]\n (fn [db _]\n   (dissoc db :project-edit/selected-project)))\n\n(defn- ms-defaults [new-project-name]\n  (let [path-end (str (subs new-project-name 3) \"/\")]\n    {:microservice-name new-project-name\n     :default-link-pattern (str \"http://ENVIRONMENT-xapi.play.us-west-2.jelli.net/\" path-end)\n     :link-overrides {\"prod\" (str \"https://xapi.jelli.com/\" path-end)\n                      \"dev\" (str \"https://xapi.dev.jelli.com/\" path-end)\n                      \"stage\" (str \"https://xapi.stage.jelli.com/\" path-end)\n                      \"int\" (str \"https://xapi.int.jelli.com/\" path-end)}}))\n\n(re-frame/reg-event-fx\n ::create-project\n (fn [{:keys [db]} [_ new-project]]\n   (let [k (keyword new-project)\n         new-project (cond-> {:friendly-name new-project}\n                       (clojure.string/starts-with? new-project \"ms-\")\n                       (merge (ms-defaults new-project)))]\n     {:db (assoc-in db [:project-data k]\n                    new-project)\n      :dispatch-n [[:navigate :routes/edit-project {:project k}]\n                   [::update-project-def k new-project]]})))\n\n(re-frame/reg-event-fx\n ::project-saved\n (fn [_ [_ result]]\n   (println result)))\n\n(re-frame/reg-event-fx\n ::update-project-def\n (fn [{:keys [db]} [_ project new-def]]\n   {:db (assoc-in db [:project-data project] new-def)\n    :http-xhrio {:method :post\n                 :uri (str envmgr-be-base-url \"v1/projectdata\")\n                 :params (project-data-ui->api project new-def)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :format (ajax/json-request-format)\n                 :on-success [::project-saved]\n                 :on-failure [::project-data-receipt-failure]}\n    :dispatch [:navigate :routes/project-list]}))\n\n(re-frame/reg-event-fx\n ::save-techops-link\n (fn [{:keys [db]} [_ k link-def return-env]]\n   {:db (assoc-in db [:techops-links k] link-def)\n    :dispatch [:navigate :routes/env-dashboard {:env return-env}]}))\n\n(comment\n  (re-frame/dispatch [::version-info-received \"int\" :dsr {:version \"1.1.0\"}])\n  (re-frame/dispatch [::gather-project-data])\n  (re-frame/dispatch [::realize-deferred-events]))\n"]}