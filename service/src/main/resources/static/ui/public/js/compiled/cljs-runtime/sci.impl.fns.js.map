{"version":3,"sources":["sci/impl/fns.cljc"],"mappings":"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","names":["p__63373","map__63375","cljs.core/--destructure-map","cljs.core.get","sci.impl.fns/parse-fn-args+body","interpret","ctx","fixed-arity","fixed-names","var-arg-name","destructure-vec","_arg-list","body","_m","min-var-args-arity","m","cljs.core/with-meta","args","cljs.core/count","cljs.core.take","js/Error","cljs.core._EQ_","runtime-bindings","cljs.core/vec","cljs.core.interleave","cljs.core.conj","cljs.core.drop","let-bindings","cljs.core.into","form","cljs.core.list_STAR_","ret","G__63391","G__63392","sci.impl.utils/mark-eval-call","cljs.core/meta","recur?","sci.impl.fns/lookup-by-arity","arities","arity","cljs.core/some","f","map__63395","or__4212__auto__","and__4210__auto__","p__63412","map__63413","sci.impl.fns/eval-fn","fn-bodies","fn-name","macro?","self-ref","cljs.core.atom","call-self","cljs.core/deref","cljs.core.apply","cljs.core/assoc-in","p1__63409#","cljs.core.map","p1__63410#","cljs.core.vary_meta","cljs.core/first","arg-count","temp__5751__auto__","cljs.core.assoc","cljs.core/reset!"],"sourcesContent":["(ns sci.impl.fns\n  {:no-doc true}\n  (:require [sci.impl.utils :refer [mark-eval-call]]))\n\n(defn parse-fn-args+body\n  [interpret ctx\n   {:sci/keys [fixed-arity fixed-names var-arg-name destructure-vec _arg-list body] :as _m}]\n  (let [;; _ (prn \"M\" _m)\n        min-var-args-arity (when var-arg-name fixed-arity)\n        m (if min-var-args-arity\n            {:sci/min-var-args-arity min-var-args-arity}\n            {:sci/fixed-arity fixed-arity})]\n    (with-meta\n      (fn [& args]\n        ;; check arity\n        (if var-arg-name\n          (when (< (count (take min-var-args-arity args))\n                   min-var-args-arity)\n            (throw (new #?(:clj Exception\n                           :cljs js/Error)\n                        (str \"Wrong number of arguments. Expected at least: \" min-var-args-arity \", got: \" (count args)))))\n          (when-not (= (count (take (inc fixed-arity) args))\n                       fixed-arity)\n            (throw (new #?(:clj Exception\n                           :cljs js/Error) (str \"Wrong number of arguments. Expected: \" fixed-arity \", got: \" (count args) \", \" args)))))\n        (let [runtime-bindings (vec (interleave fixed-names (take fixed-arity args)))\n              runtime-bindings (if var-arg-name\n                                 (conj runtime-bindings var-arg-name\n                                       (drop fixed-arity args))\n                                 runtime-bindings)\n              let-bindings (into runtime-bindings destructure-vec)\n              form (list* 'let let-bindings body)\n              ret (interpret ctx (mark-eval-call form))\n              m (meta ret)\n              recur? (:sci.impl/recur m)]\n          (if recur? (recur ret) ret)))\n      m)))\n\n(defn lookup-by-arity [arities arity]\n  (some (fn [f]\n          (let [{:keys [:sci/fixed-arity :sci/min-var-args-arity]} (meta f)]\n            (when (or (= arity fixed-arity )\n                      (and min-var-args-arity\n                           (>= arity min-var-args-arity)))\n              f))) arities))\n\n(defn eval-fn [ctx interpret {:sci/keys [fn-bodies fn-name] :as f}]\n  (let [macro? (:sci/macro f)\n        self-ref (atom nil)\n        call-self (fn [& args]\n                    (apply @self-ref args))\n        ctx (if fn-name (assoc-in ctx [:bindings fn-name] call-self)\n                ctx)\n        arities (map #(parse-fn-args+body interpret ctx %) fn-bodies)\n        f (vary-meta\n           (if (= 1 (count arities))\n             (first arities)\n             (fn [& args]\n               (let [arg-count (count args)]\n                 (if-let [f (lookup-by-arity arities arg-count)]\n                   (apply f args)\n                   (throw (new #?(:clj Exception\n                                  :cljs js/Error) (str \"Cannot call \" fn-name \" with \" arg-count \" arguments.\")))))))\n           #(assoc % :sci/macro macro?))]\n    (reset! self-ref f)\n    f))\n\n;;;; Scratch\n\n(comment\n  )\n"]}