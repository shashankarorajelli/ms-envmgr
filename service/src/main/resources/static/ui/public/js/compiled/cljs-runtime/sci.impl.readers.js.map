{"version":3,"sources":["sci/impl/readers.cljc"],"mappings":";AAKA,2BAAA,3BAAMA,8DAASC;AAAf,AACE,IAAMO,QAAM,yBAAA,2CAAA,8DAAA,IAAA,gEAAA,tMAACC;IACPR,WAAK,AAACS,sBAAS,WAAKC;AAAL,AACE,GAAI,gBAAAC,fAASD;AACX,IAAAE,qBAAe,qBAAA,rBAACK,8BAAqB,AAACC,eAAKR;AAA3C,AAAA,oBAAAE;AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAUE;QAAV,AAAAD,4CAAAD,WAAA,IAAA,/DAAYG;AAAZ,AACE,GAAM,AAACG,uBAAOH;AACR,AAAI,qDAAA,+CAAA,4CAAA,4EAAA,5NAAQT,oGAAAA,/CAAMa,yJAAkBC;;AAApC,AAAA;;AADN,GAGM,6CAAA,7CAACC,iDAAMN;AACP,AAAI,qDAAA,8CAAA,4CAAA,gEAAA,/MAAQT,mGAAAA,9CAAMgB;;AACdb;;AALV,AAMY,AAAI,IAAMc,UACW,AAACC,SAAYT;AAD9B,AAEE,qDAAA,+CAAA,4CAAA,hJAAQT,oGAAAA,/CAAMa,yJAAkBC,cAAIG;;AACtCd;;;;;AAChBA;;;AACFA;;GACJV;IAhBrBC,aAAA,AAAAC,gBAiBuCK;IAjBvCN,iBAAA,AAAAE,4BAAAF;IAAAG,YAAA,AAAAC,4CAAAJ,eAAA;IAAAK,kBAAA,AAAAD,4CAAAJ,eAAA;IAkBMyB,cAAY,4CAAA,WAAAC,vDAACC;AAAD,AAAM,OAACC,+CAAO,CAAA,gDAAAF;GAAa,8CAAA,9CAACG,kDAAQ,aAAA,ZAAK1B;IACrDsB,kBAAY,AAACE,4CAAIG,gCAAiBL;IAClCM,eAAa,gCAAA,AAAA,hCAACD;IACdE,WAAS,AAACC,cAAI,AAACC,+CAAOT,gBAAY,mCAAA,AAAA,mFAAA,AAAA,yEAAA,7KAAMpB,wJACA0B;IACxCI,kBAAgB,AAACF,cAAI,AAACG,mDAAWX,gBAAYA;IAC7CU,sBAAgB,kBAAI9B,iBACF,AAACgC,oDAAKF,gBAAgBJ,+DAAaA,mBACnCI;WA1BxB,2CAAA,uDAAA,KAAA,oEAAA,mFAAA,2CAAA,sFAAA,2DAAA,oGAAA,yGAAA,qGAAA,0EAAA,wFAAA,r5BA2BMG,6XAE4BN,uJAETjC,yFACM,AAACwC,gBAAMd,kGACHU,qFACPH,iFACGP,2FACC,mCAAA,AAAA,AAAA,qDAAA,tEAAMpB;AApCtC,AAqCEiC;;AAIJ","names":["sci.impl.readers/read-fn","expr","map__63731","cljs.core/deref","cljs.core/--destructure-map","max-fixed","cljs.core.get","var-args?","state","cljs.core/volatile!","clojure.walk/postwalk","elt","cljs.core/Symbol","temp__5751__auto__","vec__63754","cljs.core.nth","_","m","cljs.core/re-matches","cljs.core/name","cljs.core/empty?","cljs.core.update","cljs.core/max","cljs.core._EQ_","cljs.core.assoc","n","js/parseInt","fixed-names","p1__63727#","cljs.core.map","cljs.core.symbol","cljs.core.range","sci.impl.utils/mark-resolve-sym","var-args-sym","arg-list","cljs.core/vec","cljs.core.concat","destructure-vec","cljs.core.interleave","cljs.core.conj","form","cljs.core/count"],"sourcesContent":["(ns sci.impl.readers\n  {:no-doc true}\n  (:require [clojure.walk :refer [postwalk]]\n            [sci.impl.utils :refer [mark-resolve-sym]]))\n\n(defn read-fn [expr]\n  (let [state (volatile! {:max-fixed 0 :var-args? false})\n        expr (postwalk (fn [elt]\n                         (if (symbol? elt)\n                           (if-let [[_ m] (re-matches #\"^%(.*)\" (name elt))]\n                             (cond (empty? m)\n                                   (do (vswap! state update :max-fixed max 1)\n                                       '%1)\n                                   (= \"&\" m)\n                                   (do (vswap! state assoc :var-args? true)\n                                       elt)\n                                   :else (do (let [n #?(:clj (Integer/parseInt m)\n                                                        :cljs (js/parseInt m))]\n                                               (vswap! state update :max-fixed max n))\n                                             elt))\n                             elt)\n                           elt))\n                       expr)\n        {:keys [:max-fixed :var-args?]} @state\n        fixed-names (map #(symbol (str \"%\" %)) (range 1 (inc max-fixed)))\n        fixed-names (map mark-resolve-sym fixed-names)\n        var-args-sym (mark-resolve-sym '%&)\n        arg-list (vec (concat fixed-names (when var-args?\n                                            ['& var-args-sym])))\n        destructure-vec (vec (interleave fixed-names fixed-names))\n        destructure-vec (if var-args?\n                          (conj destructure-vec var-args-sym var-args-sym)\n                          destructure-vec)\n        form {:sci/fn true\n              :sci/fn-bodies\n              [{:sci/binding-vector arg-list\n                ;; body gets macroexpanded after read phase\n                :sci/body [expr]\n                :sci/fixed-arity (count fixed-names)\n                :sci/destructure-vec destructure-vec\n                :sci/arg-list arg-list\n                :sci/fixed-names fixed-names\n                :sci/var-arg-name (when var-args? '%&)}]}]\n    form))\n\n;;;; Scratch\n\n(comment)\n"]}